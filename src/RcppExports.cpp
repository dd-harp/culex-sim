// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/culex.h"
#include "../inst/include/culex_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_culex_stochastic
Rcpp::XPtr<culex_stochastic> create_culex_stochastic(const int p, const std::vector<int>& tau_E, const std::vector<int>& tau_L, const std::vector<int>& tau_P, const double dt, const arma::Mat<double>& psi);
RcppExport SEXP _culex_create_culex_stochastic(SEXP pSEXP, SEXP tau_ESEXP, SEXP tau_LSEXP, SEXP tau_PSEXP, SEXP dtSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_E(tau_ESEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_L(tau_LSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_P(tau_PSEXP);
    Rcpp::traits::input_parameter< const double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(create_culex_stochastic(p, tau_E, tau_L, tau_P, dt, psi));
    return rcpp_result_gen;
END_RCPP
}
// step_culex_stochastic
void step_culex_stochastic(Rcpp::XPtr<culex_stochastic> mod, const Rcpp::List& parameters);
RcppExport SEXP _culex_step_culex_stochastic(SEXP modSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_stochastic> >::type mod(modSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameters(parametersSEXP);
    step_culex_stochastic(mod, parameters);
    return R_NilValue;
END_RCPP
}
// set_A_stochastic
void set_A_stochastic(Rcpp::XPtr<culex_stochastic> mod, arma::Row<int> A);
RcppExport SEXP _culex_set_A_stochastic(SEXP modSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_stochastic> >::type mod(modSEXP);
    Rcpp::traits::input_parameter< arma::Row<int> >::type A(ASEXP);
    set_A_stochastic(mod, A);
    return R_NilValue;
END_RCPP
}
// get_A_stochastic
arma::Row<int> get_A_stochastic(Rcpp::XPtr<culex_stochastic> mod);
RcppExport SEXP _culex_get_A_stochastic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_stochastic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A_stochastic(mod));
    return rcpp_result_gen;
END_RCPP
}
// get_E_stochastic
arma::Row<int> get_E_stochastic(Rcpp::XPtr<culex_stochastic> mod);
RcppExport SEXP _culex_get_E_stochastic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_stochastic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_E_stochastic(mod));
    return rcpp_result_gen;
END_RCPP
}
// get_L_stochastic
arma::Row<int> get_L_stochastic(Rcpp::XPtr<culex_stochastic> mod);
RcppExport SEXP _culex_get_L_stochastic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_stochastic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_L_stochastic(mod));
    return rcpp_result_gen;
END_RCPP
}
// get_P_stochastic
arma::Row<int> get_P_stochastic(Rcpp::XPtr<culex_stochastic> mod);
RcppExport SEXP _culex_get_P_stochastic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_stochastic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_P_stochastic(mod));
    return rcpp_result_gen;
END_RCPP
}
// create_culex_deterministic
Rcpp::XPtr<culex_deterministic> create_culex_deterministic(const int p, const std::vector<int>& tau_E, const std::vector<int>& tau_L, const std::vector<int>& tau_P, const double dt, const arma::Mat<double>& psi);
RcppExport SEXP _culex_create_culex_deterministic(SEXP pSEXP, SEXP tau_ESEXP, SEXP tau_LSEXP, SEXP tau_PSEXP, SEXP dtSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_E(tau_ESEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_L(tau_LSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_P(tau_PSEXP);
    Rcpp::traits::input_parameter< const double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(create_culex_deterministic(p, tau_E, tau_L, tau_P, dt, psi));
    return rcpp_result_gen;
END_RCPP
}
// step_culex_deterministic
void step_culex_deterministic(Rcpp::XPtr<culex_deterministic> mod, const Rcpp::List& parameters);
RcppExport SEXP _culex_step_culex_deterministic(SEXP modSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_deterministic> >::type mod(modSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameters(parametersSEXP);
    step_culex_deterministic(mod, parameters);
    return R_NilValue;
END_RCPP
}
// set_A_deterministic
void set_A_deterministic(Rcpp::XPtr<culex_deterministic> mod, arma::Row<double> A);
RcppExport SEXP _culex_set_A_deterministic(SEXP modSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_deterministic> >::type mod(modSEXP);
    Rcpp::traits::input_parameter< arma::Row<double> >::type A(ASEXP);
    set_A_deterministic(mod, A);
    return R_NilValue;
END_RCPP
}
// get_A_deterministic
arma::Row<double> get_A_deterministic(Rcpp::XPtr<culex_deterministic> mod);
RcppExport SEXP _culex_get_A_deterministic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_deterministic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A_deterministic(mod));
    return rcpp_result_gen;
END_RCPP
}
// get_E_deterministic
arma::Row<double> get_E_deterministic(Rcpp::XPtr<culex_deterministic> mod);
RcppExport SEXP _culex_get_E_deterministic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_deterministic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_E_deterministic(mod));
    return rcpp_result_gen;
END_RCPP
}
// get_L_deterministic
arma::Row<double> get_L_deterministic(Rcpp::XPtr<culex_deterministic> mod);
RcppExport SEXP _culex_get_L_deterministic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_deterministic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_L_deterministic(mod));
    return rcpp_result_gen;
END_RCPP
}
// get_P_deterministic
arma::Row<double> get_P_deterministic(Rcpp::XPtr<culex_deterministic> mod);
RcppExport SEXP _culex_get_P_deterministic(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<culex_deterministic> >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_P_deterministic(mod));
    return rcpp_result_gen;
END_RCPP
}
// create_culex_infection_stochastic
Rcpp::XPtr<culex_infection_stochastic> create_culex_infection_stochastic(const int p, const std::vector<int>& tau_E, const std::vector<int>& tau_L, const std::vector<int>& tau_P, const std::vector<int>& tau_EIP, const double dt, const arma::Mat<double>& psi, const int n_species);
RcppExport SEXP _culex_create_culex_infection_stochastic(SEXP pSEXP, SEXP tau_ESEXP, SEXP tau_LSEXP, SEXP tau_PSEXP, SEXP tau_EIPSEXP, SEXP dtSEXP, SEXP psiSEXP, SEXP n_speciesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_E(tau_ESEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_L(tau_LSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_P(tau_PSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type tau_EIP(tau_EIPSEXP);
    Rcpp::traits::input_parameter< const double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const int >::type n_species(n_speciesSEXP);
    rcpp_result_gen = Rcpp::wrap(create_culex_infection_stochastic(p, tau_E, tau_L, tau_P, tau_EIP, dt, psi, n_species));
    return rcpp_result_gen;
END_RCPP
}
// tau_diffeqn
Rcpp::List tau_diffeqn(const double t, const Rcpp::NumericVector& y, const Rcpp::List& params);
RcppExport SEXP _culex_tau_diffeqn(SEXP tSEXP, SEXP ySEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(tau_diffeqn(t, y, params));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_culex_create_culex_stochastic", (DL_FUNC) &_culex_create_culex_stochastic, 6},
    {"_culex_step_culex_stochastic", (DL_FUNC) &_culex_step_culex_stochastic, 2},
    {"_culex_set_A_stochastic", (DL_FUNC) &_culex_set_A_stochastic, 2},
    {"_culex_get_A_stochastic", (DL_FUNC) &_culex_get_A_stochastic, 1},
    {"_culex_get_E_stochastic", (DL_FUNC) &_culex_get_E_stochastic, 1},
    {"_culex_get_L_stochastic", (DL_FUNC) &_culex_get_L_stochastic, 1},
    {"_culex_get_P_stochastic", (DL_FUNC) &_culex_get_P_stochastic, 1},
    {"_culex_create_culex_deterministic", (DL_FUNC) &_culex_create_culex_deterministic, 6},
    {"_culex_step_culex_deterministic", (DL_FUNC) &_culex_step_culex_deterministic, 2},
    {"_culex_set_A_deterministic", (DL_FUNC) &_culex_set_A_deterministic, 2},
    {"_culex_get_A_deterministic", (DL_FUNC) &_culex_get_A_deterministic, 1},
    {"_culex_get_E_deterministic", (DL_FUNC) &_culex_get_E_deterministic, 1},
    {"_culex_get_L_deterministic", (DL_FUNC) &_culex_get_L_deterministic, 1},
    {"_culex_get_P_deterministic", (DL_FUNC) &_culex_get_P_deterministic, 1},
    {"_culex_create_culex_infection_stochastic", (DL_FUNC) &_culex_create_culex_infection_stochastic, 8},
    {"_culex_tau_diffeqn", (DL_FUNC) &_culex_tau_diffeqn, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_culex(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
